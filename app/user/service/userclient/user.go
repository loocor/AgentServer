// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

//go:generate mockgen -destination ./user_mock.go -package userclient -source $GOFILE

package userclient

import (
	"context"

	"agent/app/user/service/user"

	"github.com/tal-tech/go-zero/zrpc"
)

type (
	CommonResp       = user.CommonResp
	ProfileViewReq   = user.ProfileViewReq
	ProfileUpdateReq = user.ProfileUpdateReq
	Profile          = user.Profile
	RegReq           = user.RegReq
	LoginReq         = user.LoginReq
	LogoutReq        = user.LogoutReq

	User interface {
		Reg(ctx context.Context, in *RegReq) (*CommonResp, error)
		Login(ctx context.Context, in *LoginReq) (*CommonResp, error)
		Logout(ctx context.Context, in *LogoutReq) (*CommonResp, error)
		ProfileView(ctx context.Context, in *ProfileViewReq) (*CommonResp, error)
		ProfileUpdate(ctx context.Context, in *ProfileUpdateReq) (*CommonResp, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) Reg(ctx context.Context, in *RegReq) (*CommonResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Reg(ctx, in)
}

func (m *defaultUser) Login(ctx context.Context, in *LoginReq) (*CommonResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in)
}

func (m *defaultUser) Logout(ctx context.Context, in *LogoutReq) (*CommonResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Logout(ctx, in)
}

func (m *defaultUser) ProfileView(ctx context.Context, in *ProfileViewReq) (*CommonResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.ProfileView(ctx, in)
}

func (m *defaultUser) ProfileUpdate(ctx context.Context, in *ProfileUpdateReq) (*CommonResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.ProfileUpdate(ctx, in)
}
